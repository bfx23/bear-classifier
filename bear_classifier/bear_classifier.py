# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_production_clean.ipynb.

# %% auto 0
__all__ = ['bear_types', 'path', 'fns', 'failed', 'bears', 'dls', 'learn']

# %% ../nbs/02_production_clean.ipynb 2
import pillow_avif
import fastbook
fastbook.setup_book()

# %% ../nbs/02_production_clean.ipynb 3
from fastbook import *
from fastai.vision.widgets import *
from fastai.vision.all import *

# %% ../nbs/02_production_clean.ipynb 5
bear_types = 'grizzly','black','teddy'
path = Path('bears')

# %% ../nbs/02_production_clean.ipynb 8
if not path.exists():
    path.mkdir()

if not path.exists():
    path.mkdir()

for o in bear_types:
    print(f"\nProcessing {o} bears...")
    dest = (path/o)
    dest.mkdir(exist_ok=True)

    results = search_images_ddg(f'{o} bear')
    print(f"Found {len(results)} search results")

    # results are already URLs, so use them directly
    valid_urls = [url for url in results if url is not None]
    print(f"Valid URLs: {len(valid_urls)}")

    if valid_urls:
        print(f"Downloading to {dest}...")
        download_images(dest, urls=valid_urls)
        # Check if files were actually downloaded
        downloaded_files = list(dest.glob('*'))
        print(f"Downloaded {len(downloaded_files)} files")
    else:
        print("No valid URLs found!")

# %% ../nbs/02_production_clean.ipynb 11
fns = get_image_files(path)
fns

# %% ../nbs/02_production_clean.ipynb 12
failed = verify_images(fns)
print(f"Failed files: {len(failed)}")
# failed

# %% ../nbs/02_production_clean.ipynb 13
failed.map(Path.unlink);

# %% ../nbs/02_production_clean.ipynb 15
bears = DataBlock(
    blocks=(ImageBlock, CategoryBlock),
    get_items=get_image_files,
    splitter=RandomSplitter(valid_pct=0.2, seed=42),
    get_y=parent_label,
    item_tfms=Resize(128))

# %% ../nbs/02_production_clean.ipynb 16
dls = bears.dataloaders(path)

# %% ../nbs/02_production_clean.ipynb 17
dls.valid.show_batch(max_n=4, nrows=1)

# %% ../nbs/02_production_clean.ipynb 24
bears = bears.new(
    item_tfms=RandomResizedCrop(224, min_scale=0.5),
    batch_tfms=aug_transforms())
dls = bears.dataloaders(path)

# %% ../nbs/02_production_clean.ipynb 25
learn = vision_learner(dls, resnet18, metrics=error_rate)
learn.fine_tune(4)

# %% ../nbs/02_production_clean.ipynb 32
learn.export()

# %% ../nbs/02_production_clean.ipynb 36
learn_inf.dls.vocab

# %% ../nbs/02_production_clean.ipynb 39
from huggingface_hub import notebook_login
notebook_login()
